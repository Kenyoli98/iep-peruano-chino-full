name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de testing y linting
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check Prettier formatting
      run: npm run format:check
    
    - name: Type check (Frontend)
      run: cd frontend && npm run type-check
    
    - name: Run tests (if available)
      run: npm test
      continue-on-error: true
    
    - name: Build frontend
      run: npm run build:frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:5000

  # Job de análisis de seguridad
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm run install:all
    
    - name: Run npm audit
      run: |
        cd backend && npm audit --audit-level=high
        cd ../frontend && npm audit --audit-level=high
      continue-on-error: true
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Job de build de Docker
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job de deployment (solo en main)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deployment step - configure according to your infrastructure"
        echo "Options: Railway, Vercel, DigitalOcean, AWS, etc."
        # Aquí iría la lógica específica de deployment
    
    - name: Health check
      run: |
        echo "Performing health check..."
        # curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

  # Job de notificaciones
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' }}
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        # Aquí puedes agregar notificaciones a Slack, Discord, etc.
    
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' }}
      run: |
        echo "❌ CI/CD Pipeline failed!"
        # Aquí puedes agregar notificaciones de error