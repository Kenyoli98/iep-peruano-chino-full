const axios = require('axios');
const jwt = require('jsonwebtoken');

const BASE_URL = 'http://localhost:3001';

// Funci√≥n para generar token de admin v√°lido
function generarTokenAdmin() {
  const payload = {
    id: 1,
    email: 'li@gmail.com',
    rol: 'admin'
  };
  return jwt.sign(payload, 'CLAVE_SECRETA_SUPERSEGURA', { expiresIn: '24h' });
}

async function testLogoutIssue() {
  console.log('üîç INVESTIGANDO PROBLEMA DE LOGOUT AUTOM√ÅTICO\n');
  
  // Test 1: Verificar login y token
  console.log('üìã Test 1: Login y verificaci√≥n de token');
  try {
    const loginResponse = await axios.post(`${BASE_URL}/usuarios/login`, {
      email: 'li@gmail.com',
      password: '123456'
    });
    
    if (loginResponse.data.success) {
      console.log('‚úÖ Login exitoso');
      console.log('üìÑ Token generado:', loginResponse.data.token.substring(0, 50) + '...');
      console.log('üë§ Rol:', loginResponse.data.rol);
      console.log('üìÖ Fecha login:', new Date().toISOString());
      
      // Test 2: Verificar validez del token
      console.log('\nüìã Test 2: Verificaci√≥n de validez del token');
      try {
        const decoded = jwt.verify(loginResponse.data.token, 'CLAVE_SECRETA_SUPERSEGURA');
        console.log('‚úÖ Token v√°lido');
        console.log('üìÑ Payload decodificado:', decoded);
        console.log('‚è∞ Expira en:', new Date(decoded.exp * 1000).toISOString());
      } catch (tokenError) {
        console.log('‚ùå Token inv√°lido:', tokenError.message);
      }
      
      // Test 3: Probar endpoint protegido
      console.log('\nüìã Test 3: Acceso a endpoint protegido');
      try {
        const protectedResponse = await axios.get(`${BASE_URL}/usuarios`, {
          headers: {
            'Authorization': `Bearer ${loginResponse.data.token}`
          }
        });
        console.log('‚úÖ Acceso a endpoint protegido exitoso');
        console.log('üìä Usuarios encontrados:', protectedResponse.data.length);
      } catch (protectedError) {
        console.log('‚ùå Error en endpoint protegido:', protectedError.response?.data || protectedError.message);
      }
      
    } else {
      console.log('‚ùå Login fallido:', loginResponse.data);
    }
  } catch (loginError) {
    console.log('‚ùå Error en login:', loginError.response?.data || loginError.message);
  }
  
  // Test 4: Verificar configuraci√≥n del servidor
  console.log('\nüìã Test 4: Verificaci√≥n de configuraci√≥n del servidor');
  try {
    const healthResponse = await axios.get(`${BASE_URL}/`);
    console.log('‚úÖ Servidor respondiendo correctamente');
  } catch (healthError) {
    console.log('‚ùå Error de conectividad:', healthError.message);
  }
  
  console.log('\nüèÅ TESTS COMPLETADOS');
  console.log('\nüìù RECOMENDACIONES:');
  console.log('1. Verificar que el frontend est√© usando el token correcto');
  console.log('2. Revisar la configuraci√≥n del hook useInactivityLogout');
  console.log('3. Verificar que no haya conflictos entre localStorage y sessionStorage');
  console.log('4. Comprobar que el hook useAuth no est√© causando redirects innecesarios');
}

testLogoutIssue().catch(console.error);