version: '3.8'

services:
  # Aplicación principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # Frontend
      - "5000:5000"  # Backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:./prisma/dev.db
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-in-production}
      - CORS_ORIGIN=http://localhost:3000
      - NEXT_PUBLIC_API_URL=http://localhost:5000
    volumes:
      - app_data:/app/backend/prisma
      - app_uploads:/app/backend/uploads
      - app_logs:/app/backend/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Servicio de desarrollo (alternativo)
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3000"  # Frontend dev
      - "5001:5000"  # Backend dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=file:./prisma/dev.db
      - JWT_SECRET=dev-jwt-secret
      - CORS_ORIGIN=http://localhost:3001
      - NEXT_PUBLIC_API_URL=http://localhost:5001
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - /app/backend/node_modules
      - /app/frontend/node_modules
      - /app/frontend/.next
      - dev_data:/app/backend/prisma
      - dev_uploads:/app/backend/uploads
      - dev_logs:/app/backend/logs
    profiles:
      - dev
    restart: unless-stopped

  # Base de datos PostgreSQL (para producción)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-iep_db}
      - POSTGRES_USER=${POSTGRES_USER:-iep_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-iep_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    profiles:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-iep_user} -d ${POSTGRES_DB:-iep_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx para proxy reverso (producción)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    profiles:
      - production
    restart: unless-stopped

volumes:
  # Volúmenes para producción
  app_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  
  # Volúmenes para desarrollo
  dev_data:
    driver: local
  dev_uploads:
    driver: local
  dev_logs:
    driver: local
  
  # Volumen para PostgreSQL
  postgres_data:
    driver: local

networks:
  default:
    name: iep-network
    driver: bridge